@SuppressWarnings('PMD.MethodNamingConventions')
//Incident #116 - https://confluence.nct.org.uk:8443/x/EoSO
@isTest
private class CourseFinderModelTest {
    @TestSetup
    private static void setupTestData() {
        TestDataFactory testDataFactory = TestDataFactory.getInstance();
        testDataFactory.buildBranchAccount()
                       .buildOrganizationAccount('acc5')
                       .buildPractitioner('Test')
                       .buildPractitionerFeeRate()
                       .buildVenue()
                       .buildRoom()
                       .buildLicenceToPractice()
                       .buildCoursesWithSessions(1, 2);
        List<Course__c> courseList = [SELECT Id, (SELECT Id FROM Sessions__r) FROM Course__c];
        testDataFactory.setCoursesToFinalAndSessionsToConfirmed(courseList)
                       .buildConfirmedReunion();
    }
    @isTest
    static void CreateCourseWithReunionSession_SessionTypeReunion_SessionWrapperReunionTrue() {
        Course__c course = [
            SELECT Name, Booking_Type__c, Has_Virtual_Teaching_Content__c, Sub_Type__c, PSA_Area__c, Type__c, Confirmed_Places__c, Couples_Allowed__c, Women_Only__c, Number_of_places__c,
                Branch__r.Name, Branch__r.Enquiries_PSA__r.Name, Branch__r.Enquiries_PSA_Email__c, Overbooking_allowed__c,
                Fee__c, Remaining_Places__c, Branch__r.Enquiries_PSA_Phone__c, Start_Date__c, End_Date__c,
                Main_Venue__r.Name, Main_Venue__r.Type__c, Main_Venue__r.Town__c, Hide_From_Course_Finder__c, Main_Venue__r.Postcode__c,
                Main_Venue__r.County__c, Main_Venue__r.Location__c, Main_Venue_Name__c, Branch__r.Branch_Number__c, Title__c, Status__c, Summary__c,
                (
                    SELECT Name, Contact_Hours__c, Day_of_Week__c, Date__c, Delivery_Type__c, Start__c, End__c, Type__c,
                        Specific_Attendee_Type__c, Additional_Information_with_Venue__c
                    FROM Sessions__r
                )
            FROM Course__c
            LIMIT 1
        ];

        Test.startTest();
        CourseFinderModel courseFinderModel = new CourseFinderModel(course);
        Test.stopTest();

        System.assertNotEquals(null, courseFinderModel);
        Integer sessionNotReunionCount = 0;
        Integer sessionReunionCount = 0;
        for(CourseFinderModel.Session session : courseFinderModel.Sessions) {
            if(session.Reunion) {
                sessionReunionCount++;
            } else {
                sessionNotReunionCount++;
            }
        }
        System.assertEquals(sessionReunionCount, 1);
        System.assertEquals(sessionNotReunionCount, 2);
    }
}
