<project name="Sample usage of Salesforce Ant tasks" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>
    <property environment="env"/>

    <!-- Setting default value for username, password and session id properties to empty string 
         so unset values are treated as empty. Without this, ant expressions such as ${env.username}
         will be treated literally.
    -->
    <condition property="sf.username" value=""> <not> <isset property="${sf.username}"/> </not> </condition>
    <condition property="sf.password" value=""> <not> <isset property="sf.password"/> </not> </condition>
    <condition property="sf.sessionId" value=""> <not> <isset property="sf.sessionId"/> </not> </condition>

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="../ant-salesforce.jar" />        	
        </classpath>
    </taskdef>
	

    <!-- Test out deploy and retrieve verbs for package 'mypkg' -->
    <target name="test">
      <!-- Upload the contents of the "mypkg" package -->
      <sf:deploy username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="mypkg" rollbackOnError="true"/>
      <mkdir dir="retrieveOutput"/>
      <!-- Retrieve the contents into another directory -->
      <sf:retrieve username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveOutput" packageNames="MyPkg"/>
    </target>

    <!-- Retrieve an unpackaged set of metadata from your org -->
    <!-- The file unpackaged/package.xml lists what is to be retrieved -->
    <target name="retrieveUnpackaged">
      <mkdir dir="retrieveUnpackaged"/>
      <!-- Retrieve the contents into another directory -->
      <sf:retrieve username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveUnpackaged" unpackaged="unpackaged/package.xml"/>
    </target>

    <!-- Retrieve all the items of a particular metadata type -->
    <target name="bulkRetrieve">
      <sf:bulkRetrieve username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" metadataType="${sf.metadataType}" retrieveTarget="retrieveUnpackaged"/>
    </target>

    <!-- Retrieve metadata for all the packages specified under packageNames -->
    <target name="retrievePkg">
      <sf:retrieve username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveOutput" packageNames="${sf.pkgName}"/>
    </target>

    <!-- Deploy the unpackaged set of metadata retrieved with retrieveUnpackaged and run tests in this organization's namespace only-->
    <target name="deployUnpackaged">
      <sf:deploy username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="retrieveUnpackaged" rollbackOnError="true"/>
    </target>

    <!-- Deploy a zip of metadata files to the org -->
    <target name="deployZip">
      <sf:deploy username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" zipFile="${sf.zipFile}" pollWaitMillis="1000" rollbackOnError="true"/>
    </target>

    <!-- Shows deploying code & running tests for code in directory -->
    <target name="deployCode">
        <antcall target="deployBase" />
        <antcall target="deployPostPackage" />
    </target>

    <target name="deployBase">
	    <sf:deploy username="${env.username}"
                password="${env.password}"
                sessionId="${sf.sessionId}"
                serverurl="${env.serverurl}"
                maxPoll="${sf.maxPoll}"
                deployRoot="src"
                rollbackOnError="true"
                testLevel="RunLocalTests"
                ignoreWarnings="true" />
    </target>

    <target name="deployPostPackage">
        <sf:deploy username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src-postPackage" rollbackOnError="true" />
    </target>
	
	 <!-- Shows deploying code with no TestLevel sepcified -->
    <target name="deployCodeNoTestLevelSpecified">
      <sf:deploy username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" rollbackOnError="true"/>
    </target>
	
	<!-- Shows deploying code and running tests only within the org namespace -->
	<target name="deployCodeRunLocalTests">
	  <sf:deploy username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" rollbackOnError="true"  testlevel="RunLocalTests"/>
	</target>
	
    <!-- Shows removing code; only succeeds if done after deployCode -->
    <target name="preUndeployCode">
      <sf:deploy username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="preDepolyRemoveSrc"/>
    </target>

    <!-- Shows removing code; only succeeds if done after deployCode -->
    <target name="postUndeployCode">
      <sf:deploy username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="postDepolyRemoveSrc"/>
    </target>

    <!-- Shows retrieving code; only succeeds if done after deployCode -->
    <target name="retrieveCode">
      <!-- Retrieve the contents listed in the file src/package.xml into the src directory -->
      <sf:retrieve username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="src" unpackaged="src/package.xml"/>
    </target>

    <!-- Shows deploying code, running all tests, and running tests (1 of which fails), and logging. -->
    <target name="deployCodeFailingTest">
      <!-- Upload the contents of the "src" package, running all tests -->
      <sf:deploy username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" testLevel="RunAllTestsInOrg" rollbackOnError="true" logType="Debugonly"/>
    </target>

    <!-- Shows check only; never actually saves to the server -->
    <target name="deployCodeCheckOnly">
      <sf:deploy username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" checkOnly="true"/>
    </target>
	
	<!-- Shows quick deployment of recent validation. Set the property sf.recentValidationId to your recent check only deployment Id -->
	<target name="quickDeploy">
	  <sf:deployRecentValidation  username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" recentValidationId="${sf.recentValidationId}"/>
	</target>
	
	<!-- Shows cancel deployment of deploy request either pending or in progress. Set property sf.requestId to Id of pending or in progress deploy request -->
	<target name="cancelDeploy">
	  <sf:cancelDeploy  username="${env.username}" password="${env.password}" serverurl="${env.serverurl}" maxPoll="${sf.maxPoll}" requestId="${sf.requestId}"/>
	</target>

	<!-- Retrieve the information of all items of a particular metadata type -->
    <target name="listMetadata">
      <sf:listMetadata username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}" metadataType="${sf.metadataType}"/>
    </target>

	<!-- Retrieve the information on all supported metadata type -->
    <target name="describeMetadata">
      <sf:describeMetadata username="${env.username}" password="${env.password}" sessionId="${sf.sessionId}" serverurl="${env.serverurl}"/>
    </target>
	
	<!-- ================== PMD : static analysis checks on code =================== --> 
    <target name="pmd"> 

    <property name="pmd.dir" value="/home/ubuntu/pmd-bin-6.10.0" /> 

    <path id="pmd.classpath"> 
        <fileset dir="${pmd.dir}\lib"> 
            <include name="*.jar" /> 
        </fileset> 
    </path> 

    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath" /> 
    
    <pmd rulesetfiles="rulesets/apex/ruleset.xml" failOnRuleViolation="no"  noCache="yes" > 
        <formatter type="xml" toFile="pmd.xml"/>
        <fileset dir="src/"> 
            <include name="**/*.*"/> 
        </fileset> 
    </pmd> 
	
    </target>
</project>